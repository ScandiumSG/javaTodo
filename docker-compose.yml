services:
  web_server:
    image: "docker-angular_todo"
    container_name: "angular_frontend"
    build:
      context: ./todoapp/
      dockerfile: ./DOCKERFILE
    ports: 
      - "4200:4000"
    volumes:
      - "todoapp:/todoapp"
      - "node_modules:/todoapp/node_modules"
    depends_on:
      springboot_api:
        condition: service_healthy
    networks:
      - frontend

  springboot_api:
    image: 'docker-springboot_todo'
    container_name: "springboot_backend"
    build:
      context: ./api/
      dockerfile: ./DOCKERFILE
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdatabase:5432/todolist_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
    depends_on:
      postgresdatabase:
        condition: service_healthy
    networks: 
      - frontend
      - backend
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  postgresdatabase:
    image: postgres:16
    container_name: "postgresDB"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=todolist_db
    networks: 
      - backend
    volumes:
        - './.containers/data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 20s

  login_server:
      image: 'docker-login-server'
      container_name: "login-server"
      build:
        context: ./login/
        dockerfile: ./DOCKERFILE
      ports:
        - "9001:8080"
        - "9002:8081"
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - SPRING_DATASOURCE_URL=jdbc:postgresql://userdatabase:5432/login_db
        - SPRING_DATASOURCE_USERNAME=postgres
        - SPRING_DATASOURCE_PASSWORD=postgres
        - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      networks:
        - login
      depends_on:
        userdatabase:
          condition: service_healthy
      healthcheck:
        test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
        interval: 15s
        timeout: 5s
        retries: 5
        start_period: 20s

  userdatabase:
    image: postgres:16
    container_name: "userdatabase"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=login_db
    networks: 
      - login
    volumes:
        - './.containers_login/data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 20s



networks:
  frontend:
    name: backend_connection_network
    driver: bridge
  backend: 
    name: database_connection_network
    driver: bridge
  login:
    name: user_connection_network
    driver: bridge

volumes:
  todoapp:
    driver: local
  node_modules:
    driver: local
  postgres_data:
    driver: local